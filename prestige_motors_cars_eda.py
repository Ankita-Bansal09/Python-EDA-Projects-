# -*- coding: utf-8 -*-
"""Prestige Motors- Cars EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zShsyUUxY1FRaibS7_KB0NyTRPbLtPBX

<center> <h1 style="background-color:orange; color:white"><br>Exploratory Data Analysis<br></h1></center>

# `Problem Statement:`
Prestige Motors is a car dealer who have cars dataset which needs to be analysed to understand various parameters important for the business needs.

## `Importing the necessary libraries`
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns #visualisation
import matplotlib.pyplot as plt #visualisation
# %matplotlib inline
sns.set(color_codes=True)
from scipy import stats
import warnings
warnings.filterwarnings("ignore")

"""## `Load the dataset into dataframe`"""

df = pd.read_csv('/content/Cars_data.csv')

df.head()

"""Now we observe the each features present in the dataset.<br>

 `Make:` The Make feature is the company name of the Car.<br>
`Model:` The Model feature is the model or different version of Car models.<br>
`Year:`  The year describes the model has been launched.<br>
`Engine Fuel Type:` It defines the Fuel type of the car model.<br>
`Engine HP:` It's say the Horsepower that refers to the power an engine produces.<br>
`Engine Cylinders:` It define the nos of cylinders in present in the engine.<br>
`Transmission Type:` It is the type of feature that describe about the car transmission type i.e Mannual or automatic.<br>
`Driven_Wheels:` The type of wheel drive.<br>
`No of doors:` It defined nos of doors present in the car.<br>
`Market Category:` This features tells about the type of car or which category the car belongs. <br>
`Vehicle Size:` It's say about the about car size.<br>
`Vehicle Style:` The feature is all about the style that belongs to car.<br>
`highway MPG:` The average a car will get while driving on an open stretch of road without stopping or starting, typically at a higher speed.<br>
`city mpg:` City MPG refers to driving with occasional stopping and braking.<br>
`Popularity:` It can refered to rating of that car or popularity of car.<br>
`MSRP:` The price of that car.

## `Check the datatypes`
"""

df.info()

"""## `Dropping irrelevant columns`"""

cols_to_drop = ["Engine Fuel Type", "Market Category", "Vehicle Style", "Popularity", "Number of Doors", "Vehicle Size"]

df1 = df.drop(["Engine Fuel Type", "Market Category", "Vehicle Style", "Popularity", "Number of Doors", "Vehicle Size"], axis =1)
df1

"""## `Renaming the columns`"""

rename_cols =  {"Make":"Company Name","Year":"Launch Year","Engine HP": "Engine Power","Driven_Wheels":"Wheel type","MSRP":"Car Price"}

df2 = df1.rename(columns= {"Make":"Company Name","Year":"Launch Year","Engine HP": "Engine Power","Driven_Wheels":"Wheel type","MSRP":"Car Price"} )

df2.head()

"""## `Dropping the duplicate rows`"""

df2.shape

df2[df2.duplicated()]

"""## `Dropping the null or missing values`"""

df2.isnull().sum()

df2.dropna(inplace=True)

df2.isnull().sum()

df2.describe()

"""## `Removing outliers`"""

## Plot a boxplot for 'Price' column in dataset.
plt.figure(figsize=(10, 6))
df2.boxplot(column='Car Price')
plt.title('Boxplot of Price')
plt.ylabel('Price')
plt.show()

"""### **`Observation:`**<br>

Here as you see that we got some values near to 1.5 and 2.0 . So these values are called outliers. Because there are away from the normal values.
Now we have detect the outliers of the feature of Price. Similarly we will checking of anothers features.
"""

## PLot a boxplot for 'HP' columns in dataset
plt.figure(figsize=(10, 6))
df2.boxplot(column='Engine Power')
plt.title('Boxplot of Engine Power')
plt.ylabel('Engine Power')
plt.show()

"""### **`Observation:`**<br>
Here boxplots show the proper distribution of of 25 percentile and 75 percentile of the feature of HP.
"""

# print all the columns which are of int or float datatype in df.

numeric_columns = df2.select_dtypes(include=['int64', 'float64']).columns
print("Numeric columns:", numeric_columns)

"""## `Visualising Univariate Distributions`"""

plt.figure(figsize=(8, 5))
bins = np.arange(0, 1000, 100)

sns.histplot(df2['Engine Power'], bins=bins, kde=False,
             color='c', edgecolor='k', linewidth=2, alpha=0.9, label='Engine Power')

plt.title('Histogram of Engine Power', fontsize=17)
plt.xticks(bins)
plt.grid(color='k', linestyle='--', linewidth=0.5)
plt.legend()
plt.show()

"""### **`Observation:`**
We plot the Histogram of feature HP with help of distplot in seaborn.<br>
In this graph we can see that there is max values near at 200.
It represents the overall distribution of continuous data variables.<br>

## `Bar Chart Plots`
"""

make_counts = df2['Company Name'].value_counts().nlargest(10)

plt.figure(figsize=(12, 8))
make_counts.plot(kind='bar', color='purple', edgecolor='black')
plt.title('Number of Cars by Company Name', fontsize=15)
plt.xlabel('Company Name', fontsize=12)
plt.ylabel('Number of Cars', fontsize=12)
plt.xticks(rotation=45)
plt.show()

"""### **`Observation:`**
In this plot we can see that we have plot the bar plot with the cars model and nos. of cars.

### `Count Plot`
A count plot can be thought of as a histogram across a categorical, instead of quantitative, variable.
"""

# plot countplot on transmission and wheeltype

plt.figure(figsize=(15, 5))
sns.countplot(data=df2, x='Transmission Type', hue='Wheel type')
plt.title('Countplot of Transmission with Wheel type', fontsize=15)
plt.xlabel('Transmission', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.show()

"""### **`Observation:`**
In this count plot, We have plot the feature of Transmission with help of hue.<br>
We can see that the the nos of count and the transmission type and automated manual is plotted. Drive mode as been given with help of hue.<br>

# `Visualising Bivariate Distributions`


Bivariate distributions are simply two univariate distributions plotted on x and y axes respectively. They help you observe the relationship between the two variables.

## `Scatter Plots`
Scatterplots are used to find the correlation between two continuos variables.
"""

# plot scatterplot on hp and price

fig, ax = plt.subplots(figsize=(10,6))
sns.scatterplot(data=df2, x='Engine Power', y='Car Price', ax=ax)
plt.title('Scatterplot of Engine Power vs Price', fontsize=15)
plt.xlabel('Engine Power', fontsize=12)
plt.ylabel('Price', fontsize=12)
plt.show()

"""### **`Observation:`**<br>
It is a type of plot or mathematical diagram using Cartesian coordinates to display values for typically two variables for a set of data.<br>
We have plot the scatter plot with x axis as HP and y axis as Price.<br>
The data points between the features should be same either wise it give errors.<br>

## `Plotting Aggregated Values across Categories`


### `Bar Plots - Mean, Median and Count Plots`



Bar plots are used to **display aggregated values** of a variable, rather than entire distributions. This is especially useful when you have a lot of data which is difficult to visualise in a single figure.

For example, say you want to visualise and *compare the Price across Cylinders*. The ```sns.barplot()``` function can be used to do that.
"""

# bar plot with default statistic=mean between Cylinder and Price

sns.barplot(x="Engine Cylinders", y="Car Price", data=df2)

"""### **`Observation:`**<br>
By default, seaborn plots the mean value across categories, though you can plot the count, median, sum etc.<br>
Also, barplot computes and shows the confidence interval of the mean as well.

# `Multivariate Plots`

## `Heatmaps`


A heat map is a two-dimensional representation of information with the help of colors. Heat maps can help the user visualize simple or complex information
"""

# Using the correlated df, plot the heatmap
# set cmap = 'BrBG', annot = True - to get the same graph as shown below
# set size of graph = (12,8)

df3 = df2.drop(columns=['Company Name','Launch Year','Model','Transmission Type','Wheel type'],axis=1)

plt.figure(figsize=(12, 8))
sns.heatmap(df3.corr(), cmap='BrBG', annot=True, linewidth = 1)
plt.title('Correlation Heatmap', fontsize=20)
plt.show()

"""### **`Observation:`**<br>
A heatmap contains values representing various shades of the same colour for each value to be plotted. Usually the darker shades of the chart represent higher values than the lighter shade. For a very different value a completely different colour can also be used.


The above heatmap plot shows correlation between various variables in the colored scale of -1 to 1.

"""